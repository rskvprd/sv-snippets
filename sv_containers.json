{
    "sv_module": {
        "prefix": "module#()",
        "body": [
            "module ${1:$TM_FILENAME_BASE}",
            "\t/*  package imports  */",
            "\t#(",
            "\t\t${2:<parameter_list>}",
            "\t)(",
            "\t\t${3:<port_list>}",
            "\t);\n",
            "\t$0",
            "endmodule: $1\n"
        ],
        "description": "Basic SystemVerilog module construct."
    },
    "sv_interface": {
        "prefix": "interface",
        "body": [
            "interface ${1:$TM_FILENAME_BASE}",
            "\t/*  package imports  */",
            "\t#(",
            "\t\t${2:<parameter_list>}",
            "\t)(",
            "\t\t${3:<port_list>}",
            "\t);\n",
            "\t$0",
            "endinterface: $1\n"
        ],
        "description": "Basic SystemVerilog interface construct."
    },
    "sv_package": {
        "prefix": "package",
        "body": [
            "package ${1:$TM_FILENAME_BASE};",
            "\t//////////////",
            "\t// Typedefs //",
            "\t//////////////",
            "\t$2\n",
            "\t////////////////",
            "\t// Parameters //",
            "\t////////////////",
            "\t$3\n",
            "\t$0",
            "endpackage: $1\n"
        ],
        "description": "Basic SystemVerilog package construct."
    },
    "sv_class": {
        "prefix": "class",
        "body": [
            "class ${1:$TM_FILENAME_BASE};",
            "\t///////////////",
            "\t// Variables //",
            "\t///////////////",
            "",
            "\t/////////////////",
            "\t// Constraints //",
            "\t/////////////////",
            "",
            "\t///////////////",
            "\t// Functions //",
            "\t///////////////",
            "",
            "\tfunction new(string name = \"$1\");",
            "\tendfunction : new",
            "\t$0\n",
            "endclass: $1\n"
        ],
        "description": "SV class template"
    },
    "sv_typedef": {
        "prefix": "typedef",
        "body": [
            "//  Typedef: $3",
            "//  --- Prototype ---",
            "//  typedef $1 $2$3",
            "//  ---",
            "typedef ${1:enum} ${2:#() }${3:<type_name>};",
            "$0"
        ],
        "description": "SV Typedef construct for NaturalDocs"
    },
    "sv_guard_ifndef": {
        "prefix": "sv_guard_ifndef",
        "body": [
            "`ifndef __${1:${TM_FILENAME/((\\w*)([\\.\\s])?)/${2:/upcase}${3:+_}/g}}",
            "`define __$1",
            "\n$0\n",
            "`endif\n"
        ],
        "description": "Basic SystemVerilog guard ifndef-define-endif construct."
    },
    //  Constraints
    "sv_extern_constraint": {
        "context": [
            "meta.class.systemverilog"
        ],
        "prefix": "extern_constraint",
        "body": [
            "extern constraint $1;\n$0"
        ],
        "description": "Constraint declaration stub."
    },
    "sv_constraint_block": {
        "context": [
            "meta.class.systemverilog",
            "source.systemverilog"
        ],
        "prefix": "constraint_block",
        "body": [
            "constraint ${1:$TM_FILENAME_BASE}${2:::}$3 {",
            "\t/*  solve order constraints  */\n",
            "\t/*  rand variable constraints  */",
            "\t$0",
            "}\n"
        ],
        "description": "Constraint block template."
    },
    //  Coverage
    "sv_covergroup": {
        "prefix": "sv_covergroup",
        "body": [
            "covergroup cg_${1:identifier} (${2:port_list}) ${3:@(coverage_event)};",
            "\t$0",
            "endgroup: cg_$1"
        ],
        "description": "Basic SystemVerilog covergroup template."
    },
    "sv_covergroup_options": {
        "prefix": "sv_covergroup_options",
        "body": [
            "// option.name = \"\";",
            "// option.at_least = ;",
            "// option.auto_bin_max = ;",
            "// option.comment = \"\";",
            "// option.cross_num_print_missing = ;",
            "// option.detect_overlap = ;",
            "// option.get_inst_coverage = ;",
            "// option.goal = ;",
            "// option.per_instance = ;",
            "// option.weight = ;",
            "$0"
        ],
        "description": "Covergroup option block template."
    },
    "sv_covergroup_type_options": {
        "prefix": "sv_covergroup_type_options",
        "body": [
            "// type_option.comment = \"\";",
            "// type_option.distribute_first = ;",
            "// type_option.goal = ;",
            "// type_option.merge_instances = ;",
            "// type_option.strobe = ;",
            "// type_option.weight = ;",
            "$0"
        ],
        "description": "Covergroup type_options block template."
    },
    "sv_coverpoint": {
        "prefix": "sv_coverpoint",
        "body": [
            "cp_${1:cover_point_identifier}: coverpoint ${2:covered_expression} iff (${3:1}) {",
            "\t$0",
            "}\n"
        ],
        "description": "Coverage point template."
    },
    "sv_coverpoint_options": {
        "prefix": "sv_coverpoint_options",
        "body": [
            "// option.at_least = ;",
            "// option.auto_bin_max = ;",
            "// option.comment = \"\";",
            "// option.detect_overlap = ;",
            "// option.goal = ;",
            "// option.weight = ;",
            "$0"
        ],
        "description": "Coverage point option block template."
    },
    "sv_coverpoint_type_options": {
        "prefix": [
            "sv_coverpoint_type_options",
            "sv_cross_type_options"
        ],
        "body": [
            "// type_option.comment = \"\";",
            "// type_option.goal = ;",
            "// type_option.weight = ;",
            "$0"
        ],
        "description": "Coverage point and cross coverage type_options block template."
    },
    "sv_covercross": {
        "prefix": "sv_covercross",
        "body": [
            "cx_${1:cross_identifier}: cross ${2:list_of_cross_items} iff (${3:1}) {",
            "\t$0",
            "}\n"
        ],
        "description": "Cross coverage template."
    },
    "sv_covercross_options": {
        "prefix": "sv_covercross_options",
        "body": [
            "// option.at_least = ;",
            "// option.comment = \"\";",
            "// option.cross_num_print_missing = ;",
            "// option.goal = ;",
            "// option.weight = ;",
            "$0"
        ],
        "description": "Cross coverage option block template."
    },
    //  Separators
    "docstring": {
        "prefix": "/**",
        "body": [
            "/**",
            " * $0",
            " *",
            " */\n"
        ],
        "description": "C++ style block comment."
    },
    "block comment": {
        "prefix": "//////",
        "body": [
            "////////////////////",
            "// $0  //",
            "////////////////////\n"
        ],
        "description": "Large 80 ch wide separator."
    },
    "typedef enum": {
		"prefix": "typedef enum",
		"body": [
			"typedef enum ${1:data_type} { $0 } ${2:name};"
		],
		"description": "typedef enum (data_type) { ... } name"
	}
}